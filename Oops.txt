				*************** Oops Assignment ************

Q1. What is inheritance in java ?

Ans : The technique of creating a new class by using on existing class functionality is called inheritance in java
	in other words , inheritance is process where a child class acquires all the properties and behaviours of the
	parent class.

Q2. what is superclass and subclass ?

Ans : A class from where a subclass inherits featuares is called supreclass.it is also called base class or parent class.
	
	A class that inherits all the members (fields,method,and nested classes) from another class is called a subclass
	it is also called a derived class , child class or extended class.

Q3. How is inheritance implemented/ achieved in java ?

Ans : inheritance can be implemented or achieved by using two keywords:
	extends: extends is a keyword that is used for developing the inheritance between two classes and two interface.

	implements : implements keyword is used for developing the inheritance between a class and interface.

Q4. What is polymorphism ?

Ans : polymorphism in oop is the ability of an entity to take several froms . in other words, it refers to the ability of 
	an object (or a reference to an object) to take different from of object .it allows a common data - gethering 
	massage to be sent to each class . polymorphism encourages what is called 'extandibility' which means an object
	or a class can have its uses extended. 

Q5. different between method overloading and method overriding .

	Overriding											Overloading

Implements "runtime polymorphism" 		------------>	Implements "compile time polymorphism"

The method call is determined at runtime	------------>	The method call is determind at compile time
base on the object type 

Occurs between superclass and subclass 	------------>	Occurs between the methods in the same class

Have the same signature ( name and 
method arguments)					------------>	Have the same name, but the parameters are different

On error,the effect will be visible at 
runtime							------------>	On error,it can be caught at compile time




Q6. What is an abstraction explained with example ?

Ans : Abstraction is nothing but the quality of dealing with ideas rather than events. it basically deals with hiding the internal
	details and showing the essential things to the user.

	example : 
			Abstract class Sport { // abstract class sport
			Abstact void jump(); 	//abstract method
			}
Q7.What is the different between an abstract method and final method in java ? Explain with an Example

Ans :The abstract method is incomplete while the final method is regarded as complete . The only way to use an abstract method is by overriding
	it,but you cannot override a final method in java 

	Example : 
			Abstract void dips(){
				// abstract method 
			}
			final void dips2(){
				// final method
			}


Q8.What is the final class in java ?

Ans : A class declared with the final keyword is known as  the final class . A final can't be inherited by subclasses. by using the final class, we can restric the
	the inheritance of the class. we can create a class as a final class only if it is complete in nature,which means it must not be an abstract class.in java all
	the wrapper if we try to inherit a final,then the compiler throws an error at compilation time. we can't create a class as immutable without the final class.


Q9.Differentiate between abstraction and encapsulation.

		Abstaction 							Encapsulation
Abstraction is feature of Oops that hides ---------->	Encapsulation is also a feature of Oops .it 
the unecessary detail but show the essental			hides the code and data into a single entity
information.								or unit so that the data can be protected the
										outside world.

it solves an issue at the design level.	------------>	Encapsulation solves on issue at implementation level.

it focuses on the external lookout	------------>	it focuses on internal working

it can be implemented using abstract	------------->	it can be implemented by using the access modifiers
classes and interface							(private, public.protected).

it is the process of going information.	------------->	it is the process of containing the information.

The object are Encapsulation that help	-------------->	The object need not to abstract that result in encapsulation.
to perform abstraction.						




Q10.difference between runtime and compile time polymorphism explain with an example

		Compile Time Polymorphism							Runtime Polymorphism
Compile time polymorphism is less flexible as	----------->	Run time polymorphism is more flexible as all things
all things execute at compile time						excute at run time

in compile time polymorphism,the call is 		----------->	in run time polymorphism, the call is not resolved by the
resolved by the compiler.								compiler.

Inheritance is not involved.					------------>	Inheritance is involved

it is also known as static binding,Early 			------------>	it is also known as Dynamic binding, Late binding and overriding
binding and overloading as well							as well

it provides fast excution because the method	----------->	it provides slow execution as compared to early binding because the
that needs to be excuted is known early at the				method that needs to be executed is known at the runtime.
compiler time.														



